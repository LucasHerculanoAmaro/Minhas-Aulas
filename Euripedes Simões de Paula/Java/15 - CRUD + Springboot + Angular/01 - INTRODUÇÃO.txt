Na aula de hoje iniciaremos o projeto Alunos, com o objetivo de auxiliar os
estudantes a conhecer o desenvolvimento Full Stack e prepará-los para o
desenvolvimento do Trabalho de Conclusão de Curso.

A finalidade deste projeto é desenvolver uma página Web que cadastre, leia, atualize
e delete os estudantes da classe, utilizando os métodos (CRUD) similares ao que
estudamos anteriormente em outros projetos. 

Os atributos que os alunos terão na aplicação são:
	- Id;
	- Nome;
	- Sobrenome;
	- E-mail.

Dessa vez, utilizaremos o SpringBoot, um modulo Spring, como base para a aplicação
back-end e futuras interações com o MySQL e com o front-end baseado no Angular, que 
também foi abordade durante nossos estudos.

Durante o desenvolvimento, é esperado dos alunos habilidades como: atenção aos 
detahes, disposição, foco, trabalho em equipe e outras habilidades que ajudarão no 
futuro desenvolvimento do Trabalho de Conclusão de Curso.

1. Preparando o Ambiente

Trabalharemos com diversas tecnologias, como: IDEs, frameworks e outras ferramentas 
de desenvolvimento. Para isso, precisamos manter nosso ambiente de trabalho 
organizado e certificar que as instalações estejam de acordo.

Para isso, certifique-se que em sua máquina, tenha:

	- Node.Js;
	- Angular;
	- Visual Studio Code;
	- Eclipse IDE;
	- Postman;
	- MySQL.

2. SpringBoot

Nosso dessenvolvimento se iniciará no site "https://start.spring.io/", onde criaremos
a Aplicação Java, com a sua versão e dependências necessárias para o bom
funcionamento da aplicação.

No Spring Initializr veremos um ca,po onde escolheremos o tipo do Proeto, Linguagem,
versão do Spring Boot, adicionaremos alguns detalhes e descrições, a versão do Java e
as Dependências.

Siga as informações abaixo para criar o projeto:

	- Project: Maven;
	- Language: Java;
	- Spring Boot: 3.3.4;
	- Project Metadata:
		- Group: com.euripedes;
		- Artifact: alunos
		- Name: alunos;
		- Description: Cadastro e controle de alunos;
		- Package name: com.euripedes.alunos.
	- Packaging: Jar;
	- Java: 17;

Em "Dependencies" escolheremos as dependências que nossa Aplicação precisará. Escolha
as sequintes dependências:

	- Spring Data JPA;
	- Spring Web;
	- Spring Boot Devtools;
	- MySQL Driver.

Após escolher as Dependências, clique na opção "Generate" e espere o fim do download
do documento e siga para a pasta onde o documento foi armazenado. Passe o projeto 
para o seu "espaço de trabalho" e extraia da pasta compactada.

3. Eclipse IDE

O Eclipse dispensa apresentações por ser uma ferramenta familiar, onde passamos meses
desenvolvendo atividades e projetos. 

Abra o Eclipse e siga os passos:
	- File > Import > Maven > Existing Maven Projects.
A tela "Import Maven Projects" será aberta, e nela você deverá adicionar o caminho
do seu projeto em "Root Directory". Feito estes passes, clique em "Finish" e o
projeto será adicionado ao "Project Explorer".

Agora é só esperar o projeto terminar de ser importado e já poderemos começar a
trabalhar em nossa Aplicação.

4. Conhecendo Aplicação Spring Boot

Agora que nosso projeto já está importado, precisamos entender a estrutura de um
projeto Spring Boot.

Dentro de nossa aplicação, encontramos as seguintes pastas:

	alunos
	     |__src/main/java
	     |__src/main/resources
	     |__src/test/ava
	     |__JRE System Library [JavaSE-17]
	     |__Maven Dependencies
	     |__src
	     |__target
	     |__HELP.md
	     |__mvnw
	     |__mvnw.cmd
	     |__pom.xml

Vamos entender o que significa esses diretórios.

4.1. src/main/java

É aqui onde vamos escrever e armazenar todo o código fonte Java da aplicação. Neste
diretório vamos criar e organizar os pacotes das camadas de controle, serviços,
repositórios, entidades e outras classes de suporte.

Em nosso projeto, vamos criar alguns pacotes como, por exemplo:
	com.exemplo.alunos.controller: Controladores REST.
	com.exemplo.alunos.model: Entidades do banco de dados.

4.2. src/main/resources

Vamos armazenar arquivos de recursos, como arquivos de configuração e estáticos.

Neste diretório temos arquivos importantes, sendo eles: application.properties
e application.yml, que são arquivos de configuração da aplicação (Por exemplo:
configurações do banco de dados, portas, etc.).

Também pode conter arquivos estáticos, como templates HTML (em uma aplicação web), arquivos de configuração do Hibernate, etc.

4.3. src/test/java

O código fonte para testes automatizados são armazenados aqui, onde é possível escrever testes unitários (JUnit) e testes de integração.

A estrutura de pacotes geralmente se assemelha a estrutura do diretório
"src/main/java" para manter o ambiente de testes semelhante às classes principais.

4.4. JRE System Library [JavaSE-17]

Indica a versão do Java utilizada no projeto, neste caso, o Java 17.
Necessário para executar a aplicação e compilar o código.

4.5. Maven Dependencies

Este é o diretório onde o Maven gerencia as dependências do projeto, listadas no
arquivo "pom.xml".

Nele há bibliotecas externas, como:  
	- Dependências Spring (Spring Boot Starter Web, Data JPA, etc.), 
	- Drivers de banco de dados (ex: MySQL, PostgreSQL), 
	- Bibliotecas de logging, entre outras.

4.6. src

É um diretório genérico, mas não tão comum em projetos Spring Boot. Ele pode conter
outros arquivos ou recursos não incluídos nos padrões de estrutura Maven.

4.7. target

Este é um diretório gerado pelo Maven durante o processo de build e contém o arquivo
".jar", que foi escolhido no "Spring Initializr", e compilado da aplicação e outros
arquivos temporários gerados durante a compilação e testes.

Este diretório é importante para distribuir ou implantar a aplicação.

4.8. HELP.md

Arquivo que geralmente contém instruções e informações sobre o projeto, como comandos
de build, execução, e links úteis para desenvolvedores.

4.9. mvnw e mvnw.cmd

"mvnw" (para Linux/macOS) e "mvnw.cmd" (para Windows) são wrappers do Maven, que
permitem que a aplicação seja construída e executada sem a necessidade de o Maven
estar instalado na máquina, já que eles puxam uma versão local do Maven para o
projeto.

4.10. pom.xml

O "pom;xml" é o arquivo de configuração principal do projeto Maven. Que define as
dependências do projeto, plugins, versões do Java, configurações de build, entre
outras.

Exemplo de dependências comuns:
	- spring-boot-starter-web: Para criar uma aplicação web.
	- spring-boot-starter-data-jpa: Para interagir com banco de dados.

Agora que já criamos nosso projeto e entendemos a estrutura dele, vamos trabalhar
dar início as configurações, e por fim, começar a criar nossos Pacotes e Classes.

A nossa próxima aula será direcionada ao documento "application.properties", no
diretório "src/main/resources".

5. Application Properties

Na aula de hoje vamos conhecer sobre algumas configurações para banco de dados,
portas de servidores, entre outras configurações.

Primeiramente, iremos configurar o banco de dados. Para este projeto, precisamos
criar uma tabela que atenda as expectativas do nosso projeto. Mas não iremos
trabalhar com aqueles scripts que trabalhamos no projeto anterior, vamos
configurar diretamente no "application.properties".

Adicione as seguintes linhas ao seu "application.properties":
	
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database=mysql
spring.datasource.url=jdbc:mysql://localhost/DB_SISTEMA_GERENCIAMENTO_ALUNOS?createDatabaseIfNotExist=true&serverTimezone=UTC&useSSl=false
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

O que significa cada uma dessas linhas?

	- Utilizamos "spring.jpa.hibernate.ddl-auto=update" para atualizar o banco
	de dados a cada requisição.

	- Utilizamos "spring.jpa.database=mysql" para indicar qual é o banco que
	utiizamos.

	- Utilizamos "spring.datasource.url= {{endereço do banco}}" para indicar
	qual é o endereço de conexão para o banco de dados. Observe que, junto
	a ele temos "createDatabaseIfNotExist" que cria de maneira automática o 
	Banco e a Tabela sem a necessidade de criar tudo manualmente.

	- No "spring.datasource.username=root" e "spring.datasource.password=root"
	indicamos o login e senha do banco de dados. Lembre-se que "root" é o 
	nome padrão que os desenvolvedores utilizam para criar logins e senhas.

	- Utilizamos o "spring.jpa.properties.hibernate.dialect" para que nossa
	aplicação consiga conversar com o banco de dados. Dessa forma, podemos
	otimizar consultas ao Banco de Dados.

Provavelmente, ao longo de nosso projeto, mais configurações podem ser feitas. Mas
vamos com calma, não faz bem à "saúde" de nossa aplicação criar diversas
configurações que não serão utilizadas.

Por hora, nossa configuração inicial está feita aqui. Na próxima aula, vamos 
trabalhar com o Pacote "model" e "repository", onde vamos implementar o objeto de
nossa aplicação e criar uma configuração para o repositório desse objeto.

6. Model e Repository

Na aula de hoje, iremos trabalhar com os pacotes "model" e "repository", também 
vamos criar a classe "Alunos" para definir os atributos e os métodos para nosso
objeto, e a interface "AlunosRepository" para definir configurações para interações 
com o banco de dados.

Vá ao eclipse e, no diretório "scr/main/java", crie um pacote com o nome "model" e 
a classe "Aluno" dentro deste pacote. A continuação de nossa aula será feito por
esta classe.


REFERÊNCIAS

5. Application Properties
**********************************************************************************************************
* Referência: 
* Nome: Angular 10 + Spring Boot CRUD Full Stack App - 3 - Create Spring Boot Project and Configure MySQL 
* Autor: Java Guides
* Link: https://www.youtube.com/watch?v=kpM5xV17S9U&list=PLGRDMO4rOGcNzi3CpBWsCdQSzbjdWWy-f&index=4
**********************************************************************************************************


